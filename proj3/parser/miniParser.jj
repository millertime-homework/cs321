PARSER_BEGIN(miniParser)

package parser;
import ast.*;

public class miniParser {
}

PARSER_END(miniParser)

/**************************************
 Lexer Token Specification Begins Here
***************************************/

/* RESERVED WORDS */
TOKEN :
{
  <BOOLEAN: "boolean">
| <CLASS: "class">
| <ELSE: "else">
| <EXTENDS: "extends">
| <FALSE: "false">
| <FLOAT: "float">
| <IF: "if">
| <INT: "int">
| <LENGTH: "length">
| <MAIN: "main">
| <NEW: "new">
| <PUBLIC: "public">
| <RETURN: "return">
| <PRINTLN: "System.out.println">
| <STATIC: "static">
| <THIS: "this">
| <TRUE: "true">
| <VOID: "void">
| <WHILE: "while">
| <STRING: "String">
}

/* IDENTIFIERS AND NUMBERS */
TOKEN :
{
  <#DIGIT: ["0"-"9"]>
| <#LETTER: ["A"-"Z"] | ["a"-"z"]>
| <ID: <LETTER> (<LETTER> | <DIGIT>)*>
  { if (matchedToken.image.length() > 255)
      throw new TokenMgrError("Lexical error at line "
                + matchedToken.beginLine + ", column "
                + matchedToken.beginColumn
                + ".  Id length over 255", 0);
  }
| <INTVAL: (<DIGIT>)+>
  { long i = Long.valueOf(matchedToken.image);
    if (i > 2147483647)
      throw new TokenMgrError("Lexical error at line "
                + matchedToken.beginLine + ", column "
                + matchedToken.beginColumn
                + ".  Integer value over 2^31-1", 0);
  }
| <#REAL_NUMBER: ((<DIGIT>)* "." (<DIGIT>)+) | ((<DIGIT>)+ "." (<DIGIT>)*)>
| <REAL: (<REAL_NUMBER> "f") | (<REAL_NUMBER> "F")>
}

/* STRING LITERALS */
TOKEN :
{
  <#QUOTE: "\"">
| <STRING_LITERAL: (<QUOTE> (~["\n", "\r", "\""])+ <QUOTE>)>
  { if (matchedToken.image.length() > 257)
      throw new TokenMgrError("Lexical error at line "
                + matchedToken.beginLine + ", column "
                + matchedToken.beginColumn
                + ".  String length over 255", 0);
  }
}

/* DELIMITERS AND OPERATORS */
TOKEN :
{
  <LEFT_PAREN: "(">
| <RIGHT_PAREN: ")">
| <LEFT_BRACKET: "[">
| <RIGHT_BRACKET: "]">
| <LEFT_BRACE: "{">
| <RIGHT_BRACE: "}">
| <COMMA: ",">
| <ASSIGNMENT: "=">
| <SEMICOLON: ";">
| <OR: "||">
| <AND: "&&">
| <PLUS: "+">
| <MINUS: "-">
| <MULTIPLY: "*">
| <DIVIDE: "/">
| <PERIOD: ".">
| <EQUALS: "==">
| <NOT_EQUALS: "!=">
| <LESS_THAN: "<">
| <LESS_THAN_OR_EQUAL: "<=">
| <GREATER_THAN: ">">
| <GREATER_THAN_OR_EQUAL: ">=">
| <NOT: "!">
}

/* WHITE SPACE */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

/* COMMENTS */
SKIP :
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <MULTI_LINE_COMMENT: "/*" (~["*"] | "*" ~["/"])* "*/" >
| <UNTERMINATED_ML_COMMENT: "/*" ~[]>
  { if (true)
      throw new TokenMgrError("Unterminated multi-line comments", 0);
  }
}

/********************************************
 Parser Production Specification Begins Here
*********************************************/

//Program    -> ClassDecl {ClassDecl}
Program Program() :
{
    ClassDecl c; ClassDeclList cl = new ClassDeclList();
}
{
    c=ClassDecl() { cl.add(c); } ( c=ClassDecl() {cl.add(c); } )* <EOF>
    { return new Program(cl); }
}

//ClassDecl  -> "class" <ID> ["extends" <ID>] "{" {VarDecl} {MethodDecl} "}"
ClassDecl ClassDecl() :
{
    Token cit, pit;
    Id ci, pi = null; VarDecl v; MethodDecl m;
    VarDeclList vl = new VarDeclList();
    MethodDeclList ml = new MethodDeclList();
}
{
    <CLASS> cit=<ID> { ci = new Id(cit.toString()); }
        [ <EXTENDS> pit=<ID> { pi = new Id(pit.toString()); } ]
        <LEFT_BRACE> ( v=VarDecl() { vl.add(v); } )*
        ( m=MethodDecl() { ml.add(m); } )* <RIGHT_BRACE>
        { return new ClassDecl(ci, pi, vl, ml); }
}

//MethodDecl -> "public" ( (Type | "void") <ID> "(" [Formals] ")"
//                       | "static" "void" "main" "(" "String" "[" "]" <ID> ")" )
//              "{" {VarDecl} {Statement} "}"
MethodDecl MethodDecl() :
{
    Type t = null; Id i; Token tkn; FormalList fl = new FormalList();
    VarDeclList vl = new VarDeclList(); StmtList sl = new StmtList();
    VarDecl v; Stmt s;
}
{
    <PUBLIC> ( ( t=Type() | <VOID> ) tkn=<ID> { i=new Id(tkn.toString()); }
        <LEFT_PAREN> [ fl=Formals() ] <RIGHT_PAREN>
        | <STATIC> <VOID> <MAIN> <LEFT_PAREN> <STRING> <LEFT_BRACKET>
        <RIGHT_BRACKET> tkn=<ID> <RIGHT_PAREN>
        { i = new Id("main"); } )
        <LEFT_BRACE> ( LOOKAHEAD(2) v=VarDecl() { vl.add(v); } )*
        ( s=Statement() { sl.add(s); } )* <RIGHT_BRACE>
        { return new MethodDecl(t, i, fl, vl, sl); }
}

//Formals    -> Type <ID> {"," Type <ID>}
FormalList Formals() :
{
    FormalList fl = new FormalList();
    Formal f; Token tkn; Type t; Id i;
}
{
    t=Type() tkn=<ID>
        { i = new Id(tkn.toString()); f = new Formal(t, i);
          fl.add(f); }
        ( <COMMA> t=Type() tkn=<ID>
          { i = new Id(tkn.toString());
            f = new Formal(t, i); fl.add(f); } )*
    { return fl; }
}

//VarDecl    -> Type <ID> ["=" InitExpr] ";"
VarDecl VarDecl() :
{
    Type t; Token tkn; Exp e = null;
}
{
    t=Type() tkn=<ID> [ <ASSIGNMENT> e=InitExpr() ] <SEMICOLON>
    { return new VarDecl(t, new Id(tkn.toString()), e); }
}

//Type       -> BasicType ["[" "]"] | <ID>
Type Type() :
{
    Type t; Token tkn;
}
{
    t=BasicType() [ <LEFT_BRACKET> <RIGHT_BRACKET> ]
    { return t; }
|
    tkn=<ID>
    { return new ObjType(new Id(tkn.toString())); }
}

//BasicType  -> "int" | "float" | "boolean"
Type BasicType() :
{}
{
    <INT>
    { return new BasicType(BasicType.Int); }
|
    <FLOAT>
    { return new BasicType(BasicType.Float); }
|
    <BOOLEAN>
    { return new BasicType(BasicType.Bool); }
}

//Statement  -> "{" {Statement} "}"
//           |  Lvalue ("=" InitExpr | "(" [Args] ")") ";"
//           |  "if" "(" Expr ")" Statement ["else" Statement]
//           |  "while" "(" Expr ")" Statement
//           |  "System.out.println" "(" [Expr | <STRVAL>] ")" ";"
//           |  "return" [Expr] ";"
Stmt Statement() :
{
    Stmt s = null; Exp e1 = null; Exp e2 = null;
    Stmt s1 = null; Stmt s2 = null; Token tkn = null;
    ExpList el = null; StmtList sl = new StmtList();
    int assignment = 0;
}
{
    <LEFT_BRACE> ( s=Statement() { sl.add(s); } )* <RIGHT_BRACE>
    { return new Block(sl); }
|
    e1=Lvalue() ( <ASSIGNMENT> e2=InitExpr() <SEMICOLON>
            { assignment = 1; }
        | <LEFT_PAREN> [ el=Args() ] <RIGHT_PAREN> <SEMICOLON> )
        { if (assignment == 1) {
              return new Assign(e1, e2);
          } else {
              if (e1 instanceof Field) {
                  Field lval = (Field) e1;
                  return new CallStmt(lval.obj, lval.var, el);
              } else {
                  return null;
              }
          }
        }
|
    <IF> <LEFT_PAREN> e1=Expr() <RIGHT_PAREN> s1=Statement()
        [ LOOKAHEAD(1) <ELSE> s2=Statement() ]
    { return new If(e1, s1, s2); }
|
    <PRINTLN> <LEFT_PAREN> [ e1=Expr() | tkn=<STRING_LITERAL> ] <RIGHT_PAREN>
        <SEMICOLON>
    { return tkn==null ? new Print(e1) : new Print(new StrVal(tkn.toString())); }
|
    <WHILE> <LEFT_PAREN> e1=Expr() <RIGHT_PAREN> s1=Statement()
    { return new While(e1, s1); }
|
    <RETURN> [ e1=Expr() ] <SEMICOLON>
    { return new Return(e1); }
}

//Args       -> Expr {"," Expr}
ExpList Args() :
{
    ExpList el = new ExpList(); Exp e;
}
{
    e=Expr() { el.add(e); } ( <COMMA> e=Expr() { el.add(e); } )*
    { return el; }
}

//InitExpr   -> "new" ( BasicType "[" <INTVAL> "]" | <ID> "(" [Args] ")" )
//           |  Expr
Exp InitExpr() :
{
    Exp e; Type t; Token tkn; ExpList el = null;
}
{
    <NEW> ( t=BasicType() <LEFT_BRACKET> tkn=<INTVAL> <RIGHT_BRACKET>
        { return new NewArray(t, Integer.parseInt(tkn.toString())); }
        | tkn=<ID> <LEFT_PAREN> [ el=Args() ] <RIGHT_PAREN>
        { return new NewObj(new Id(tkn.toString()), el); } )
|
    e=Expr()
    { return e; }
}

//Expr       -> AndExpr OrTail
Exp Expr() :
{ Exp e1, e2 = null; }
{
    e1=AndExpr() e2=OrTail(e1)
    { return e2==null ? e1 : e2; }
}

//OrTail     -> ["||" AndExpr OrTail]
Exp OrTail(Exp e0) :
{ Exp e1 = null, e2 = null; }
{
    [ <OR> e1=AndExpr() { e1 = new Binop(Binop.OR, e0, e1); } e2=OrTail(e1) ]
    { return e2==null ? e1 : e2; }
}

//AndExpr    -> RelExpr AndTail
Exp AndExpr() :
{ Exp e1, e2 = null; }
{
    e1=RelExpr() e2=AndTail(e1)
    { return e2==null ? e1 : e2; }
}

//AndTail   -> ["&&" RelExpr AndTail]
Exp AndTail(Exp e0) :
{ Exp e1 = null, e2 = null; }
{
    [ <AND> e1=RelExpr() { e1 = new Binop(Binop.AND, e0, e1); } e2=AndTail(e1) ]
    { return e2==null ? e1 : e2; }
}

//RelExpr    -> ArithExpr [Relop ArithExpr]
Exp RelExpr() :
{ Exp e1, e2 = null; int r; }
{
    e1=ArithExpr() [ r=Relop() e2=ArithExpr() { e2 = new Relop(r, e1, e2); } ]
    { return e2==null ? e1 : e2; }
}

//ArithExpr  -> Term ArithTail
Exp ArithExpr() :
{ Exp e1, e2 = null; }
{
    e1=Term() e2=ArithTail(e1)
    { return e2==null ? e1 : e2; }
}

//ArithTail  -> [ Add Term ArithTail ]
Exp ArithTail(Exp e0) :
{ Exp e1 = null, e2 = null; int a; }
{
    [ a=Add() e1=Term() { e1 = new Binop(a, e0, e1); } e2=ArithTail(e1) ]
    { return e2==null ? e1 : e2; }
}

//Add        -> "+" | "-"
int Add() :
{}
{
    <PLUS> { return Binop.ADD; }
|
    <MINUS> { return Binop.SUB; }
}

//Term       -> Factor TermTail
Exp Term() :
{ Exp e1, e2 = null; }
{
    e1=Factor() e2=TermTail(e1)
    { return e2==null ? e1 : e2; }
}

//TermTail   -> [ Mult Factor TermTail ]
Exp TermTail(Exp e0) :
{ Exp e1 = null, e2 = null; int m; }
{
    [ m=Mult() e1=Factor() { e1 = new Binop(m, e0, e1); } e2=TermTail(e1) ]
    { return e2==null ? e1 : e2; }
}

//Mult       -> "*" | "/"
int Mult() :
{}
{
    <MULTIPLY> { return Binop.MUL; }
|
    <DIVIDE> { return Binop.DIV; }
}

//Factor     -> Unop Factor
//           |  "(" Expr ")"
//           |  Lvalue ["." "length" "(" ")" | "(" [Args] ")"]
//           |  Literal
Exp Factor() :
{
    int op; Exp e = null; ExpList el = null; 
    int arraylength = 0;
}
{
    op=Unop() e=Factor()
    { return new Unop(op, e); }
|
    <LEFT_PAREN> e=Expr() <RIGHT_PAREN>
    { return e; }
|
    e=Lvalue() [ <PERIOD> <LENGTH> <LEFT_PAREN> <RIGHT_PAREN>
               { arraylength = 1; }
             | <LEFT_PAREN> [ el=Args() ] <RIGHT_PAREN> ]
             { if (arraylength == 1) {
                   return new ArrayLen(e);
               } else {
                   if (e instanceof Field) {
                       Field lval = (Field) e;
                       return new Call(lval.obj, lval.var, el);
                   } else {
                       return e;
                   }
               }
             }
|
    e=Literal()
    { return e; }
}

//Lvalue     -> ["this" "."] <ID> {"." <ID>} ["[" Expr "]"]
Exp Lvalue() :
{
    This th = null; Id i1 = null; Id i2 = null; Token tkn; Exp e = null;
}
{
    [ <THIS> <PERIOD> { th = new This(); } ]
        tkn=<ID> { i1 = new Id(tkn.toString()); }
        [ LOOKAHEAD(2) <PERIOD> tkn=<ID> {i2 = new Id(tkn.toString()); } ]
        [ <LEFT_BRACKET> e=Expr() <RIGHT_BRACKET> ]
    { if ( e != null) {
          return new ArrayElm(new Id(tkn.toString()), e);
      } else if (th != null) {
          return new Field(th, i1);
      } else if (i2 != null) {
          return new Field(i1, i2);
      } else {
          return i1;
      }
    }
}

//Literal    -> <INTVAL> | <FLOATVAL> | "true" | "false"
Exp Literal() :
{ Token tkn; }
{
    tkn=<INTVAL> { return new IntVal(Integer.parseInt(tkn.toString())); }
    | tkn=<REAL> { return new FloatVal(Float.parseFloat(tkn.toString())); }
    | tkn=<TRUE> { return new BoolVal(Boolean.parseBoolean(tkn.toString())); }
    | tkn=<FALSE> { return new BoolVal(Boolean.parseBoolean(tkn.toString())); }
}

//Relop      -> "==" | "!=" | "<" | "<=" | ">" | ">="
int Relop() :
{}
{
    <EQUALS> { return Relop.EQ; }
    | <NOT_EQUALS> { return Relop.NE; }
    | <LESS_THAN> { return Relop.LT; }
    | <LESS_THAN_OR_EQUAL> { return Relop.LE; }
    | <GREATER_THAN> { return Relop.GT; }
    | <GREATER_THAN_OR_EQUAL> { return Relop.GE; }
}

//Unop       -> "-" | "!"
int Unop() :
{}
{
    <MINUS> { return Unop.NEG; } | <NOT> { return Unop.NOT; }
}
