PARSER_BEGIN(miniLexer)

package lexer;

public class miniLexer {
}

PARSER_END(miniLexer)

/* RESERVED WORDS */
TOKEN :
{
  <BOOLEAN: "boolean">
| <CLASS: "class">
| <ELSE: "else">
| <EXTENDS: "extends">
| <FALSE: "false">
| <FLOAT: "float">
| <IF: "if">
| <INT: "int">
| <LENGTH: "length"> 
| <MAIN: "main">
| <NEW: "new">
| <PUBLIC: "public">
| <RETURN: "return">
| <STATIC: "static">
| <THIS: "this">
| <TRUE: "true">
| <VOID: "void">
| <WHILE: "while">
| <STRING: "String">
| <PRINTLN: "System.out.println">
}

/* IDENTIFIERS AND NUMBERS */
TOKEN :
{
  <#DIGIT: ["0"-"9"]>
| <#LETTER: ["A"-"Z"] | ["a"-"z"]>
| <ID: <LETTER> (<LETTER> | <DIGIT>)*>
  { if (matchedToken.image.length() > 255)
      throw new TokenMgrError("Lexical error at line "
                + matchedToken.beginLine + ", column "
                + matchedToken.beginColumn
                + ".  Id length over 255", 0);
  }
| <NUM: (<DIGIT>)+>
  { long i = Long.valueOf(matchedToken.image);
    if (i > 2147483647)
      throw new TokenMgrError("Lexical error at line "
                + matchedToken.beginLine + ", column "
                + matchedToken.beginColumn
                + ".  Integer value over 2^31-1", 0);
  }
| <#REAL_NUMBER: ((<DIGIT>)* "." (<DIGIT>)+) | ((<DIGIT>)+ "." (<DIGIT>)*)>
| <REAL: (<REAL_NUMBER> "f") | (<REAL_NUMBER> "F")>
}

/* STRING LITERALS */
TOKEN :
{
  <#QUOTE: "\"">
| <STRING_LITERAL: (<QUOTE> (~["\n", "\r", "\""])+ <QUOTE>)>
  { if (matchedToken.image.length() > 257)
      throw new TokenMgrError("Lexical error at line "
                + matchedToken.beginLine + ", column "
                + matchedToken.beginColumn
                + ".  String length over 255", 0);
  }
}

/* OPERATORS */
TOKEN :
{
  "="
| "+"
| "-"
| "*"
| "/"
| "&&"
| "||"
| "!"
| "=="
| "!="
| "<"
| "<="
| ">"
| ">="
}

/* DELIMITERS */
TOKEN :
{
  ";"
| ","
| "."
| "("
| ")"
| "["
| "]"
| "{"
| "}"
}

/* WHITE SPACE */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r" 
}

/* SINGLE-LINE COMMENTS */
SKIP :
{
<COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

/* MULTI-LINE COMMENTS */
MORE :
{
"/*" : IN_MULTI_LINE_COMMENT
}

<IN_MULTI_LINE_COMMENT>
MORE :
{
< ~[] >
}

/* buggy, need help with

<IN_MULTI_LINE_COMMENT>
SKIP :
{
    "<EOF>"
        { //throw new TokenMgrError("OH GOD", 0); }
            System.out.println("OH GOD"); }
}
*/


<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
"*/" : DEFAULT
}
